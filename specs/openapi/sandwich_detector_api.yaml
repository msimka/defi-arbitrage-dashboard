openapi: 3.0.3
info:
  title: Sandwich Detector API
  description: |
    Single-function API for detecting profitable sandwich attack opportunities in DeFi mempool transactions.
    
    Performance Guarantees:
    - Detection latency: <10ms per transaction
    - Accuracy: >85% profitable opportunity identification
    - Throughput: 1000+ transactions/second
    
  version: 1.0.0
  contact:
    name: DeFi Arbitrage Dashboard
    email: support@defi-arbitrage-dashboard.com

servers:
  - url: http://localhost:3000/api/v1
    description: Development server
  - url: https://api.defi-arbitrage-dashboard.com/v1
    description: Production server

security:
  - bearerAuth: []
  - apiKey: []

paths:
  /mev/sandwich/detect:
    post:
      summary: Detect sandwich attack opportunities
      description: |
        Analyzes a pending mempool transaction to identify profitable sandwich attack opportunities.
        Returns structured opportunity assessment with profit estimation and execution parameters.
      
      operationId: detectSandwichOpportunity
      tags:
        - MEV Detection
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SandwichDetectionRequest'
            examples:
              uniswap_v2_trade:
                summary: Uniswap V2 large trade
                value:
                  pending_transaction:
                    hash: "0x1234567890abcdef..."
                    to: "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D"
                    value: "5000000000000000000"
                    gas_price: "25000000000"
                    data: "0x18cbafe5..."
                  gas_price_context:
                    current_price: "20000000000"
                    eth_price_usd: 2500
                    congestion_level: 45
                  liquidity_pool_state:
                    pair_address: "0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc"
                    reserves:
                      token0: "1500000000000000000000"
                      token1: "3750000000000"
                    total_liquidity_usd: 8750000
                    eth_price_usd: 2500
      
      responses:
        '200':
          description: Successful opportunity detection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SandwichOpportunityResponse'
              examples:
                profitable_opportunity:
                  summary: High-profit sandwich opportunity
                  value:
                    success: true
                    component_id: "sandwich_detector_1693478400000"
                    opportunity_score: 87
                    estimated_profit: 245.50
                    execution_parameters:
                      front_run_amount: 2.5
                      back_run_amount: 2.5
                      gas_price_multiplier: 1.5
                    risk_assessment:
                      price_impact_risk: "medium"
                      gas_spike_risk: 0.15
                      competition_risk: "low"
                    metadata:
                      execution_time_ms: 8
                      accuracy_confidence: 0.92
                      pool_liquidity_usd: 8750000
        
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /mev/sandwich/batch-detect:
    post:
      summary: Batch detect opportunities across multiple transactions
      description: |
        Analyzes multiple pending transactions simultaneously for sandwich opportunities.
        Optimized for high-throughput mempool monitoring.
      
      operationId: batchDetectSandwichOpportunities
      tags:
        - MEV Detection
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - transactions
                - gas_price_context
              properties:
                transactions:
                  type: array
                  items:
                    $ref: '#/components/schemas/PendingTransaction'
                  maxItems: 100
                gas_price_context:
                  $ref: '#/components/schemas/GasPriceContext'
                filter_options:
                  type: object
                  properties:
                    min_profit_threshold:
                      type: number
                      minimum: 0
                      default: 50
                    max_gas_price:
                      type: number
                      minimum: 0
      
      responses:
        '200':
          description: Batch detection results
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  total_analyzed:
                    type: integer
                  opportunities_found:
                    type: integer
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/SandwichOpportunityResponse'
                  performance_metrics:
                    type: object
                    properties:
                      total_execution_time_ms:
                        type: number
                      average_time_per_transaction_ms:
                        type: number
                      throughput_transactions_per_second:
                        type: number

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    
    apiKey:
      type: apiKey
      in: header
      name: X-API-Key
  
  schemas:
    PendingTransaction:
      type: object
      required:
        - hash
        - to
        - value
        - gas_price
        - data
      properties:
        hash:
          type: string
          pattern: "^0x[a-fA-F0-9]{64}$"
          description: Transaction hash
        to:
          type: string
          pattern: "^0x[a-fA-F0-9]{40}$"
          description: Recipient address (DEX router)
        value:
          type: string
          description: Transaction value in wei
        gas_price:
          type: string
          description: Gas price in wei
        gas_limit:
          type: string
          description: Gas limit
        data:
          type: string
          description: Transaction calldata
        from:
          type: string
          pattern: "^0x[a-fA-F0-9]{40}$"
          description: Sender address
    
    GasPriceContext:
      type: object
      required:
        - current_price
        - eth_price_usd
        - congestion_level
      properties:
        current_price:
          type: string
          description: Current gas price in wei
        eth_price_usd:
          type: number
          minimum: 0
          description: Current ETH price in USD
        congestion_level:
          type: integer
          minimum: 0
          maximum: 100
          description: Network congestion percentage
        predicted_price:
          type: string
          description: Predicted gas price for next block
    
    LiquidityPoolState:
      type: object
      required:
        - pair_address
        - reserves
        - total_liquidity_usd
      properties:
        pair_address:
          type: string
          pattern: "^0x[a-fA-F0-9]{40}$"
          description: Uniswap pair contract address
        reserves:
          type: object
          required:
            - token0
            - token1
          properties:
            token0:
              type: string
              description: Reserve amount for token0
            token1:
              type: string
              description: Reserve amount for token1
        total_liquidity_usd:
          type: number
          minimum: 0
          description: Total pool liquidity in USD
        eth_price_usd:
          type: number
          minimum: 0
          description: Current ETH price for calculations
    
    SandwichOpportunityResponse:
      type: object
      properties:
        success:
          type: boolean
        component_id:
          type: string
          description: Unique component execution identifier
        opportunity_score:
          type: integer
          minimum: 0
          maximum: 100
          description: Profitability score (0-100)
        estimated_profit:
          type: number
          description: Estimated net profit in USD
        execution_parameters:
          type: object
          properties:
            front_run_amount:
              type: number
              description: Optimal front-run amount in ETH
            back_run_amount:
              type: number
              description: Back-run amount in ETH
            gas_price_multiplier:
              type: number
              description: Gas price multiplier for priority
        risk_assessment:
          type: object
          properties:
            price_impact_risk:
              type: string
              enum: [low, medium, high]
            gas_spike_risk:
              type: number
              minimum: 0
              maximum: 1
            competition_risk:
              type: string
              enum: [low, medium, high]
        metadata:
          type: object
          properties:
            execution_time_ms:
              type: number
              description: Actual execution time
            accuracy_confidence:
              type: number
              minimum: 0
              maximum: 1
            pool_liquidity_usd:
              type: number
    
    ErrorResponse:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          enum:
            - invalid_transaction_format
            - invalid_gas_context
            - insufficient_pool_liquidity
            - gas_costs_exceed_profit
            - network_timeout
            - execution_failure
            - rate_limit_exceeded
        message:
          type: string
          description: Human-readable error description
        component_id:
          type: string
          description: Component identifier for debugging